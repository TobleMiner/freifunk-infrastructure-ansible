#!/bin/bash

IP4TABLES=$(which iptables)
IP6TABLES=$(which ip6tables)

if ! "$IPTABLES" -V &> /dev/null; then
  IPTABLES="$(command -v iptables-legacy)"
fi

if ! "$IP6TABLES" -V &> /dev/null; then
  IP6TABLES="$(command -v ip6tables-legacy)"
fi

## Wrapper function for iptables - IPv4 version
function ip4tables() {
  echo -e "\t iptables $@"
  "$IP4TABLES" "$@"
}

## Wrapper function for iptables - IPv6 version
function ip6tables() {
  echo -e "\t ip6tables $@"
  "$IP6TABLES" "$@"
}

## Wrapper function for iptables - IPv{4,6} version
# should only be used for statements which apply
# for both iptables versions.
function ip46tables() {
  ip4tables "$@"
  ip6tables "$@"
}

## Wrapper function for iptables-save or netfilter-save
# selects correct service-name, depending on dist codename
function save_rules(){
  local service='iptables-persistent'
  case  "$(lsb_release -c -s)" in
        wheezy) service='iptables-persistent'  ;;
        *) service='netfilter-persistent' ;;
  esac
  /usr/sbin/service $service save
}

## Create a filter rule which blocks the given ip-range
# IPv4 Verion
# #1: iptables chain
# #2: IP-Range to block in a iptables compatible format
function block4(){
  local chain="$1"
  local iprange="$2"
  ip4tables -t filter -A "$chain" -s "$iprange" -j DROP
}

## Create a filter rule which blocks the given ip-range
# IPv6 Version
# #1: iptables chain
# #2: IP-Range to block in a iptables compatible format
function block6(){
  local chain="$1"
  local iprange="$2"
  ip6tables -t filter -A "$chain" -s "$iprange" -j DROP
}

## Rate Limit
# IPv{4,6} Version
function rate_limit46(){
  rate_limit4 $@
  rate_limit6 $@
}

## Rate Limit - Introduce rate limiting for services.
# IPv4 Version
# #1: Name of the service
# #2: Time to match with in second
# #3: count until hit
function rate_limit4() {
  local service="$1"
  local seconds="$2"
  local hitcount="$3"
  shift 3
  echo -e "\t Rate Limit ${service} with ${seconds} seconds and a hitcount of ${hitcount}"
  ip4tables -m recent --name "$service" --update --seconds "$seconds" --hitcount "$hitcount" -j DROP "$@"
  ip4tables -m recent --name "$service" --set "$@"
}

## Rate Limit - Introduce rate limiting for services.
# IPv6 Version
# #1: Name of the service
# #2: Time to match with in second
# #3: count until hit
function rate_limit6() {
  local service="$1"
  local seconds="$2"
  local hitcount="$3"
  shift 3
  echo -e "\t Rate Limit ${service} with ${seconds} seconds and a hitcount of ${hitcount}"
  ip6tables -m recent --name "$service" --update --seconds "$seconds" --hitcount "$hitcount" -j DROP "$@"
  ip6tables -m recent --name "$service" --set "$@"
}

## Utility function to execute
# # echo $value > $path
# like commands.
function set_value() {
  local path="$1"
  local value="$2"
  echo -e "\t Set ${path} to '${value}'"
  echo "echo '${value}' > '${path}'" >> /etc/rclocal.d/firewall-values
}

mkdir -p /etc/rclocal.d/
rm -f /etc/rclocal.d/firewall-values 2> /dev/null
touch /etc/rclocal.d/firewall-values

for rules in $(find /etc/iptables.d/ -type f | sort); do
   if [ -f "$rules" ] ; then
     (
       echo "File: $rules"
       . "$rules"
     )
   fi
done

. /etc/rclocal.d/firewall-values

save_rules
